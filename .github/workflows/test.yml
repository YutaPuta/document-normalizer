name: Document Normalizer Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9, '3.10', '3.11']

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        # Install additional test dependencies
        pip install pytest pytest-cov
        
    - name: Run basic tests
      run: |
        python simple_test.py
        
    - name: Run detailed tests
      run: |
        python detailed_test.py
        
    - name: Run text processing tests
      run: |
        python test_with_text.py
        
    - name: Run configuration tests
      run: |
        python -c "
        import sys
        sys.path.insert(0, 'src')
        from config_loader import ConfigLoader
        config = ConfigLoader()
        print('✅ Configuration loading test passed')
        "
        
    - name: Test PDF processing (with mock PDF)
      run: |
        # Install PDF libraries
        pip install reportlab fpdf2
        # Create sample PDF
        python create_sample_pdf.py
        # Test PDF processing
        python pdf_test.py
        
    - name: Validate documentation
      run: |
        python scripts/update_docs.py --validate-only

  lint:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - name: Install linting tools
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort
        
    - name: Run black (code formatting check)
      run: |
        black --check --diff src/ *.py
        
    - name: Run isort (import sorting check)
      run: |
        isort --check-only --diff src/ *.py
        
    - name: Run flake8 (linting)
      run: |
        flake8 src/ *.py --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 src/ *.py --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

  security:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety
        
    - name: Run bandit (security linting)
      run: |
        bandit -r src/ -f json -o bandit-report.json || true
        bandit -r src/ --exit-zero-on --severity-level medium
        
    - name: Run safety (vulnerability check)
      run: |
        safety check --json --output safety-report.json || true
        safety check --short-report

  docs:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install PyYAML
        
    - name: Check documentation consistency
      run: |
        python scripts/update_docs.py --validate-only
        
    - name: Verify all documentation files exist
      run: |
        test -f README.md
        test -f doc/LOCAL_TESTING.md
        test -f doc/JAPANESE_PROCESSING.md
        test -f doc/CONFIGURATION.md
        test -f doc/HOOKS_GUIDE.md
        echo "✅ All required documentation files exist"
        
    - name: Check for broken internal links
      run: |
        python -c "
        import re
        from pathlib import Path
        
        def check_links(file_path):
            with open(file_path, 'r', encoding='utf-8') as f:
                content = f.read()
            
            # Find markdown links
            links = re.findall(r'\[([^\]]+)\]\(([^)]+\.md)\)', content)
            broken_links = []
            
            for link_text, link_path in links:
                if link_path.startswith('doc/'):
                    full_path = Path(link_path)
                elif link_path.startswith('../'):
                    full_path = Path(file_path).parent / link_path
                else:
                    full_path = Path(file_path).parent / link_path
                
                if not full_path.exists():
                    broken_links.append(f'{link_text} -> {link_path}')
            
            return broken_links
        
        # Check main README
        broken = check_links('README.md')
        
        # Check doc files
        for doc_file in Path('doc').glob('*.md'):
            broken.extend(check_links(doc_file))
        
        if broken:
            print('❌ Broken links found:')
            for link in broken:
                print(f'  - {link}')
            exit(1)
        else:
            print('✅ No broken internal links found')
        "